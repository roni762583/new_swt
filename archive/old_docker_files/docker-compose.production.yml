version: '3.8'

services:
  # New SWT Training Service
  swt-training:
    build:
      context: .
      dockerfile: Dockerfile.training
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: new-swt-training:latest
    container_name: swt-training-production
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - SWT_MODE=training
      - SWT_AGENT_TYPE=stochastic_muzero
      - SWT_EPISODE_REFERENCE=13475
      - SWT_MAX_EPISODES=20000
      - SWT_MAX_RUNTIME_HOURS=24
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-}
      - TZ=UTC
    volumes:
      - ./checkpoints:/app/checkpoints
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - training-cache:/app/cache
    networks:
      - swt-network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    healthcheck:
      test: ["CMD", "python3", "-c", "import torch; print('Training service healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # New SWT Live Trading Service  
  swt-live-trader:
    build:
      context: .
      dockerfile: Dockerfile.live
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: new-swt-live:latest
    container_name: swt-live-production
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - SWT_MODE=live
      - SWT_AGENT_TYPE=stochastic_muzero
      - SWT_EPISODE_REFERENCE=13475
      - OANDA_API_TOKEN=${OANDA_API_TOKEN}
      - OANDA_ACCOUNT_ID=${OANDA_ACCOUNT_ID}
      - OANDA_ENVIRONMENT=${OANDA_ENVIRONMENT:-practice}
      - SWT_LIVE_TRADING=${SWT_LIVE_TRADING:-false}
      - TZ=UTC
    volumes:
      - ./checkpoints:/app/checkpoints:ro
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - live-cache:/app/cache
    networks:
      - swt-network
    ports:
      - "8080:8080"  # Monitoring dashboard
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      - monitoring

  # Monitoring and Metrics Service
  monitoring:
    image: prom/prometheus:latest
    container_name: swt-monitoring
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - swt-network
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Log Aggregation Service
  logging:
    image: grafana/loki:latest
    container_name: swt-logging
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/tmp/loki
    networks:
      - swt-network
    ports:
      - "3100:3100"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Dashboard Service
  dashboard:
    image: grafana/grafana:latest
    container_name: swt-dashboard
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-swt-admin-2025}
      - GF_SECURITY_ADMIN_USER=swt-admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana-data:/var/lib/grafana
    networks:
      - swt-network
    ports:
      - "3000:3000"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    depends_on:
      - monitoring
      - logging

  # Redis Cache for Performance
  redis:
    image: redis:7-alpine
    container_name: swt-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - swt-network
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  training-cache:
    driver: local
  live-cache:
    driver: local
  prometheus-data:
    driver: local
  loki-data:
    driver: local
  grafana-data:
    driver: local
  redis-data:
    driver: local

networks:
  swt-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16