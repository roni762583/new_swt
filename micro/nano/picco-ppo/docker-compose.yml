# UNIFIED PRODUCTION DOCKER COMPOSE - PPO NEURAL NETWORK TRAINING
# Single source of truth for all container operations

version: '3.8'

services:
  # ======= MAIN TRAINING SERVICE =======
  ppo-training:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      cache_from:
        - python:3.11-slim
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: picco-ppo:latest
    container_name: ppo-training
    hostname: ppo-training

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 16G
        reservations:
          cpus: '4'
          memory: 8G

    # Volumes
    volumes:
      - ./checkpoints:/app/checkpoints
      - ./results:/app/results
      - ../../../data:/app/data:ro
      - /tmp/numba_cache:/tmp/numba_cache

    # Environment
    environment:
      - PYTHONUNBUFFERED=1
      - OMP_NUM_THREADS=8
      - MKL_NUM_THREADS=8
      - NUMBA_NUM_THREADS=8
      - NUMBA_CACHE_DIR=/tmp/numba_cache
      - TZ=America/New_York

    # Command - using optimized training with neural networks
    command: >
      python -u train_optimized.py
      --episodes 100
      --n_envs 4
      --n_workers 8

    # Restart policy
    restart: unless-stopped

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

    # Networks
    networks:
      - ppo-network

  # ======= MONITORING SERVICE =======
  ppo-monitor:
    image: picco-ppo:latest
    container_name: ppo-monitor
    hostname: ppo-monitor

    # Resource limits (lighter)
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

    # Volumes (read-only)
    volumes:
      - ./results:/app/results:ro
      - ./checkpoints:/app/checkpoints:ro

    environment:
      - PYTHONUNBUFFERED=1
      - TZ=America/New_York

    # Command
    command: python -u monitor_expectancy.py

    # Dependencies
    depends_on:
      - ppo-training

    restart: unless-stopped

    networks:
      - ppo-network

  # ======= VALIDATION SERVICE =======
  ppo-validation:
    image: picco-ppo:latest
    container_name: ppo-validation
    hostname: ppo-validation

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

    # Volumes
    volumes:
      - ./checkpoints:/app/checkpoints:ro
      - ./results:/app/results
      - ../../../data:/app/data:ro

    environment:
      - PYTHONUNBUFFERED=1
      - TZ=America/New_York

    # Command - validate best checkpoint
    command: >
      bash -c "while true; do
        python -u validate_minimal.py --best;
        sleep 3600;
      done"

    depends_on:
      - ppo-training

    restart: unless-stopped

    networks:
      - ppo-network

  # ======= TENSORBOARD SERVICE (Optional) =======
  # ppo-tensorboard:
  #   image: tensorflow/tensorflow:latest
  #   container_name: ppo-tensorboard
  #   ports:
  #     - "6006:6006"
  #   volumes:
  #     - ./results:/app/results:ro
  #   command: tensorboard --logdir=/app/results --bind_all
  #   networks:
  #     - ppo-network

networks:
  ppo-network:
    driver: bridge

# ======= USAGE =======
# Build with caching:
#   DOCKER_BUILDKIT=1 docker compose -f docker-compose.unified.yml build
#
# Start training:
#   docker compose -f docker-compose.unified.yml up -d ppo-training
#
# Monitor progress:
#   docker compose -f docker-compose.unified.yml up -d ppo-monitor
#
# Watch logs:
#   docker compose -f docker-compose.unified.yml logs -f ppo-training
#
# Stop all:
#   docker compose -f docker-compose.unified.yml down