version: '3.8'

services:
  # Live Trading Service
  swt-live-trader:
    build:
      context: .
      dockerfile: Dockerfile.live
    container_name: swt-live-trader
    restart: unless-stopped
    ports:
      - "8080:8080"  # Metrics and health
    volumes:
      - ./checkpoints:/app/checkpoints:ro
      - ./logs:/app/logs
      - ./sessions:/app/sessions
      - ./cache:/app/cache
      - ./config:/app/config:ro
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    networks:
      - swt-network
    depends_on:
      - redis
    command: ["python", "live_trading_main.py", 
              "--config", "config/live.yaml", 
              "--checkpoint", "checkpoints/episode_13475.pt"]
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis for caching and state management
  redis:
    image: redis:7-alpine
    container_name: swt-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - swt-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: swt-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/swt_alerts.yml:/etc/prometheus/swt_alerts.yml:ro
      - prometheus_data:/prometheus
    networks:
      - swt-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: swt-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - swt-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=swt_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: swt-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - swt-network
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: swt-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - swt-network
    depends_on:
      - redis

networks:
  swt-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local