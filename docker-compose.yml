version: '3.8'

services:
  # Training Container - Always stays alive, runs on 6 cores
  training:
    build:
      context: .
      dockerfile: Dockerfile.training
    image: swt-training:latest
    container_name: swt_training_container
    restart: unless-stopped
    working_dir: /workspace
    volumes:
      - .:/workspace
      - ./checkpoints:/workspace/checkpoints
      - ./logs/training:/workspace/logs
      - ./cache:/workspace/cache
    environment:
      - PYTHONPATH=/workspace
      - OMP_NUM_THREADS=6
      - MKL_NUM_THREADS=6
      - NUMBA_NUM_THREADS=6
    deploy:
      resources:
        limits:
          cpus: '6'
          memory: 12G
    command: >
      bash -c "
      echo '🚀 Starting SWT Training Container (6 cores)...' &&
      echo '📊 Starting FULL TRAINING with 20,000 episode limit...' &&
      python training_main.py --config config/training.yaml --max-episodes 20000 --enable-validation || true &&
      echo '✅ Training complete or stopped. Container staying alive...' &&
      tail -f /dev/null
      "
    healthcheck:
      test: ["CMD", "python", "-c", "print('Training container healthy')"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Validation Container - Always monitoring for new checkpoints
  validation:
    build:
      context: .
      dockerfile: Dockerfile.validation
    image: swt-validation:latest
    container_name: swt_validation_container
    restart: unless-stopped
    working_dir: /workspace
    volumes:
      - .:/workspace
      - ./validation_results:/workspace/validation_results
      - ./logs/validation:/workspace/logs
      - ./checkpoints:/workspace/checkpoints
      - ./cache:/workspace/cache
    environment:
      - PYTHONPATH=/workspace
      - OMP_NUM_THREADS=6
      - MKL_NUM_THREADS=6
      - NUMBA_NUM_THREADS=6
    deploy:
      resources:
        limits:
          cpus: '6'
          memory: 8G
    command: >
      bash -c "
      echo '🔍 Starting SWT Validation Container (up to 6 cores)...' &&
      while true; do
        echo 'Monitoring checkpoints directory for new best_checkpoint.pth...' &&
        python swt_validation/checkpoint_monitor.py --checkpoint-dir /workspace/checkpoints --output-dir /workspace/validation_results --watch-interval 30 --auto-validate || true &&
        echo 'Validation monitor restarting in 10 seconds...' &&
        sleep 10
      done
      "
    depends_on:
      - training
    healthcheck:
      test: ["CMD", "python", "-c", "print('Validation container healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Live Trading Container - Always running with Episode 10
  live:
    build:
      context: .
      dockerfile: Dockerfile.training
    image: swt-training:latest
    container_name: swt_live_trading
    restart: unless-stopped
    working_dir: /workspace
    volumes:
      - .:/workspace
      - ./sessions:/workspace/sessions
      - ./logs/live:/workspace/logs
      - ./checkpoints:/workspace/checkpoints
    environment:
      - PYTHONPATH=/workspace
      - OMP_NUM_THREADS=4
      - MKL_NUM_THREADS=4
      - NUMBA_NUM_THREADS=4
      - CHECKPOINT_PATH=/workspace/checkpoints/episode_10_best.pth
      - OANDA_API_KEY=${OANDA_API_KEY}
      - OANDA_ACCOUNT_ID=${OANDA_ACCOUNT_ID}
      - OANDA_ENVIRONMENT=${OANDA_ENVIRONMENT}
      - IS_DEMO=${IS_DEMO}
      - INSTRUMENT=${INSTRUMENT}
      - MAX_POSITION_SIZE=${MAX_POSITION_SIZE}
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
    command: >
      bash -c "
      echo '💹 Starting SWT Live Trading Container (Episode 10)...' &&
      echo 'OANDA Account: ${OANDA_ACCOUNT_ID}' &&
      echo 'Environment: ${OANDA_ENVIRONMENT}' &&
      echo 'Instrument: ${INSTRUMENT}' &&
      while true; do
        if [ -f /workspace/checkpoints/episode_10_best.pth ]; then
          echo '🔥 Starting LIVE TRADING with Episode 10 checkpoint...'
          python live_trading_main.py --checkpoint /workspace/checkpoints/episode_10_best.pth --config config/live.yaml || true
        else
          echo 'Waiting for episode_10_best.pth checkpoint...'
        fi
        echo 'Live trading will restart in 30 seconds...'
        sleep 30
      done
      "
    depends_on:
      - validation
    healthcheck:
      test: ["CMD", "python", "-c", "print('Live trading container healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
    network_mode: host  # Use host network for OANDA API access

networks:
  default:
    name: swt_network
    driver: bridge