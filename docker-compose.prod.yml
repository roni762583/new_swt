version: '3.8'

services:
  training:
    build:
      context: .
      dockerfile: Dockerfile.training
      cache_from:
        - swt-training:latest
    image: swt-training:latest
    container_name: swt_training_container
    restart: unless-stopped
    working_dir: /workspace
    volumes:
      - .:/workspace:ro
      - ./checkpoints:/workspace/checkpoints:rw  # Shared checkpoint volume
      - ./logs/training:/workspace/logs:rw
      - ./cache:/workspace/cache:rw
      - checkpoint-volume:/shared/checkpoints:rw  # Named volume for real-time sharing
    environment:
      - PYTHONPATH=/workspace
      - OMP_NUM_THREADS=8
      - MKL_NUM_THREADS=8
      - NUMBA_NUM_THREADS=8
      - CHECKPOINT_DIR=/shared/checkpoints
      - VALIDATION_TRIGGER=true  # Enable automatic validation callbacks
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 16G
    command: >
      bash -c "
      echo '🚀 Starting training...' &&
      python training_main.py
        --config config/training.yaml
      "
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('/shared/checkpoints/latest.pth') else 1)"]
      interval: 60s
      timeout: 10s
      retries: 3

  validation:
    build:
      context: .
      dockerfile: Dockerfile.validation
      cache_from:
        - swt-validation:latest
    image: swt-validation:latest
    container_name: swt_validation_container
    restart: unless-stopped
    working_dir: /workspace
    volumes:
      - .:/workspace:ro
      - ./validation_results:/workspace/validation_results:rw
      - ./logs/validation:/workspace/logs:rw
      - checkpoint-volume:/shared/checkpoints:ro  # Read-only access to shared checkpoints
    environment:
      - PYTHONPATH=/workspace
      - OMP_NUM_THREADS=8
      - MKL_NUM_THREADS=8
      - NUMBA_NUM_THREADS=8
      - CHECKPOINT_DIR=/shared/checkpoints
      - AUTO_VALIDATE_NEW=true
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 8G
    command: >
      bash -c "
      echo '🔍 Starting continuous validation with checkpoint monitoring...' &&
      python swt_validation/checkpoint_monitor.py
        --checkpoint-dir /shared/checkpoints
        --output-dir validation_results
        --watch-interval 30
        --auto-validate
      "
    depends_on:
      - training
    healthcheck:
      test: ["CMD", "python", "-c", "import torch; print('Validation healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3

  live:
    build:
      context: .
      dockerfile: Dockerfile.live
      cache_from:
        - swt-live:latest
    image: swt-live:latest
    container_name: swt_live_trading
    restart: unless-stopped
    working_dir: /workspace
    volumes:
      - .:/workspace:ro
      - ./sessions:/workspace/sessions:rw
      - ./logs/live:/workspace/logs:rw
      - checkpoint-volume:/shared/checkpoints:ro  # Access to latest validated checkpoints
    environment:
      - PYTHONPATH=/workspace
      - OMP_NUM_THREADS=8
      - MKL_NUM_THREADS=8
      - NUMBA_NUM_THREADS=8
      - CHECKPOINT_DIR=/shared/checkpoints
      - USE_LATEST_VALIDATED=true  # Automatically use latest validated checkpoint
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 4G
    command: >
      bash -c "
      echo '💹 Starting continuous live trading...' &&
      python live_trading_continuous.py
        --checkpoint /shared/checkpoints/best_validated.pth
      "
    depends_on:
      - validation
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "8080:8080"  # Monitoring endpoint
      - "8081:8081"  # Metrics endpoint

  # Checkpoint synchronization service
  checkpoint-sync:
    image: busybox:latest
    container_name: checkpoint_sync
    restart: unless-stopped
    volumes:
      - checkpoint-volume:/shared/checkpoints
      - ./checkpoints:/local/checkpoints
    command: >
      sh -c "
      echo 'Starting checkpoint synchronization...' &&
      while true; do
        # Sync local checkpoints to shared volume
        if [ -f /local/checkpoints/*.pth ]; then
          cp -u /local/checkpoints/*.pth /shared/checkpoints/ 2>/dev/null || true
        fi
        # Create symlink for latest checkpoint
        latest=$$(ls -t /shared/checkpoints/*.pth 2>/dev/null | head -1)
        if [ -n \"$$latest\" ]; then
          ln -sf \"$$latest\" /shared/checkpoints/latest.pth
        fi
        sleep 10
      done
      "

volumes:
  checkpoint-volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/shared_checkpoints

networks:
  default:
    name: swt_network
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16