# SWT Training Container
# Production-grade Docker image for training system
# 
# Features:
# - GPU support with CUDA base image
# - Multi-stage build for optimal size  
# - Process limits for rogue process prevention
# - Monitoring and health checks
# - Development tools for debugging

# Build stage - Install dependencies
FROM nvidia/cuda:11.8-devel-ubuntu20.04 as builder

# Prevent interactive prompts during build
ARG DEBIAN_FRONTEND=noninteractive

# Set build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Add metadata
LABEL org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.title="SWT Training System" \
      org.opencontainers.image.description="Production training system with GPU support and process management" \
      org.opencontainers.image.vendor="SWT Trading Systems"

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.11 \
    python3.11-dev \
    python3-pip \
    build-essential \
    gcc \
    g++ \
    cmake \
    pkg-config \
    git \
    wget \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create symlink for python
RUN ln -s /usr/bin/python3.11 /usr/bin/python

# Set work directory
WORKDIR /build

# Copy requirements
COPY requirements.txt .
COPY pyproject.toml .

# Install Python dependencies with GPU support
RUN pip install --no-cache-dir --upgrade pip wheel setuptools && \
    pip install --no-cache-dir --user torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118 && \
    pip install --no-cache-dir --user -r requirements.txt

# Production stage - Runtime with GPU support
FROM nvidia/cuda:11.8-runtime-ubuntu20.04 as production

# Prevent interactive prompts
ARG DEBIAN_FRONTEND=noninteractive

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.11 \
    python3-pip \
    ca-certificates \
    curl \
    tini \
    htop \
    vim \
    tmux \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create symlink for python
RUN ln -s /usr/bin/python3.11 /usr/bin/python

# Create non-root user for training
RUN groupadd --gid 1001 swt && \
    useradd --uid 1001 --gid swt --shell /bin/bash --create-home swt

# Set up application directories
RUN mkdir -p /app/data /app/logs /app/checkpoints /app/config /app/experiments && \
    chown -R swt:swt /app

# Copy Python packages from builder
COPY --from=builder /root/.local /home/swt/.local

# Set environment variables
ENV PYTHONPATH=/app \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH=/home/swt/.local/bin:$PATH \
    SWT_ENVIRONMENT=training \
    SWT_LOG_LEVEL=INFO \
    SWT_DATA_DIR=/app/data \
    SWT_LOG_DIR=/app/logs \
    SWT_CONFIG_DIR=/app/config \
    CUDA_VISIBLE_DEVICES=0 \
    TORCH_CUDA_ARCH_LIST="7.0;7.5;8.0;8.6" \
    FORCE_CUDA=1

# Process limits for rogue process prevention
ENV SWT_MAX_MEMORY=12G \
    SWT_MAX_CPU=8 \
    SWT_MAX_PROCESSES=100 \
    SWT_MAX_FILES=10000 \
    SWT_TIMEOUT_HOURS=24

# Switch to non-root user  
USER swt
WORKDIR /app

# Copy application code
COPY --chown=swt:swt . .

# Create necessary directories
RUN mkdir -p logs data checkpoints experiments results && \
    chmod +x docker/entrypoint.sh

# Health check for training system
HEALTHCHECK --interval=120s --timeout=30s --start-period=60s --retries=2 \
    CMD python -c "import psutil; print(f'CPU: {psutil.cpu_percent()}%, Memory: {psutil.virtual_memory().percent}%')" || exit 1

# Expose ports for monitoring
EXPOSE 8080 6006

# Use tini as init system
ENTRYPOINT ["tini", "--", "./docker/entrypoint.sh"]

# Default command - start training
CMD ["train"]